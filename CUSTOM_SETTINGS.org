#+TITLE:CUSTOM_SETTINGS

* General Settings

** Miscellaneous
#+begin_src emacs-lisp :tangle yes
	(setq ansi-color-names-vector
          ["#0d0f11" "#cc6666" "#b5bd68" "#f0c674" "#81a2be" "#c7abc7" "#8abeb7" "#ffffff"])
	(setq auto-compile-on-save-mode t)
	(setq auto-compile-update-autoloads t)
	(setq auto-compile-verbose t)
	(setq beacon-blink-when-point-moves-vertically 10)
	(setq blink-matching-paren nil)
	(setq browse-url-browser-function (quote eww-browse-url))
	(setq browse-url-chrome-program "google-chrome")
	(setq compilation-scroll-output t)
	(setq cua-enable-cua-keys (quote shift))
	(setq cursor-type (quote bar))
	(setq display-time-mode t)
	(setq enable-recursive-minibuffers t)
	(setq eval-expression-print-length nil)
	(setq eval-expression-print-level nil)
	(setq evil-want-C-u-scroll t)
	(setq fci-rule-color "#969896")
	(setq font-use-system-font t)
	(setq inhibit-startup-echo-area-message "ub2")
	(setq make-backup-files nil)
	(setq markdown-enable-wiki-links t)
	(setq mouse-wheel-scroll-amount (quote (1 ((shift) . 1) ((control)))))
	(setq normal-erase-is-backspace-mode 1)
	(setq showkey-tooltip-mode t)
	(setq tab-width 4)
	(setq visible-bell t)
#+END_SRC

** Scroll & Display
#+begin_src emacs-lisp :tangle yes
	(setq hscroll-margin 1)
	(setq hscroll-step 1)
	(setq recenter-positions (quote (middle top bottom)))
	(setq recenter-redisplay t)
	(setq scroll-bar-mode (quote right))
	(setq scroll-conservatively 1001)
	(setq scroll-preserve-screen-position t)
#+END_SRC

** Tabs
#+begin_src emacs-lisp :tangle yes
	(setq evil-tabs-mode t)
	(setq global-evil-tabs-mode t)
#+END_SRC
** Themes
#+begin_src emacs-lisp :tangle yes
	(setq custom-enabled-themes (quote (doom-one)))
	(setq custom-safe-themes
		(quote
			("d37b6fc3ea627226e0a703f3b97f18e42d5a58c293a7d34c2483688f72e66ccf" "9f3181dc1fabe5d58bbbda8c48ef7ece59b01bed606cfb868dd147e8b36af97c" "227e2c160b0df776257e1411de60a9a181f890cfdf9c1f45535fc83c9b34406b" "e91ca866d6cbb79786e314e0466f4f1b8892b72e77ed702e53bf7565e0dfd469" "18a33cdb764e4baf99b23dcd5abdbf1249670d412c6d3a8092ae1a7b211613d5" "6bde11b304427c7821b72a06a60e8d079b8f7ae10b407d8af37ed5e5d59b1324" "e146feef4c2f5abc6140e40f69d75b05cb27ae56644b6f9ced362416090bed1d" default)))
#+END_SRC

** Toolbars
#+begin_src emacs-lisp :tangle yes
	(setq gmm-tool-bar-style (quote retro))
	(setq gnus-group-update-tool-bar nil)
	(setq gnus-summary-tool-bar nil)
	(setq tool-bar-pop-up-mode nil)
	(setq tool-bar-position (quote top))
	(setq tool-bar-style (quote text))
#+END_SRC

** Windows

*** Neotree
#+begin_src emacs-lisp :tangle yes
	(setq doom-neotree-enable-variable-pitch t)
	(setq doom-neotree-line-spacing 1)
	(setq neo-auto-indent-point t)
	(setq neo-click-changes-root nil)
	(setq neo-create-file-auto-open t)
	(setq neo-hidden-regexp-list (quote ("\\.pyc$" "~$" "^#.*#$" "\\.elc$")))
	(setq neo-keymap-style (quote default))
	(setq neo-mode-line-type (quote neotree))
	(setq neo-show-hidden-files t)
	(setq neo-show-updir-line t)
	(setq neo-smart-open t)
	(setq neo-theme (quote nerd))
	(setq neo-toggle-window-keep-p nil)
	(setq neo-window-position (quote left))
	(setq neo-window-width 25)
	(setq neotree-show nil)
#+END_SRC

*** Scratch
#+begin_src emacs-lisp :tangle yes
	(setq immortal-scratch-mode t)
	(setq inhibit-startup-screen t)
	(setq initial-scratch-message nil)
	(setq persistent-scratch-autosave-mode t)
	(setq unkillable-scratch t)
#+END_SRC

*** Speedbar
#+begin_src emacs-lisp :tangle yes
	(setq speedbar-default-position (quote right))
	(setq speedbar-directory-unshown-regexp "^\\(\\..*\\)\\'")
	(setq speedbar-frame-parameters
		(quote
			((minibuffer . t)
			 (width . 45)
			 (border-width . 0)
			 (menu-bar-lines . 1)
			 (tool-bar-lines . 3)
			 (unsplittable . f)
			 (left-fringe . 0))))
	(setq speedbar-frame-plist
      (quote
          (minibuffer t width 50 border-width 0 internal-border-width 0 unsplittable f default-toolbar-visible-p f has-modeline-p t menubar-visible-p f default-gutter-visible-p t)))
	(setq speedbar-show-unknown-files t)
	(setq speedbar-supported-extension-expressions
		(quote
			(".org" ".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".lsp" ".p" ".java" ".js" ".f\\(90\\|77\\|or\\)?" ".ad[abs]" ".p[lm]" ".tcl" ".m" ".scm" ".pm" ".py" ".g" ".s?html" ".ma?k" "[Mm]akefile\\(\\.in\\)?" ".*")))
	(setq speedbar-track-mouse-flag t)
	(setq sr-speedbar-default-width 80)
	(setq sr-speedbar-delete-windows t)
	(setq sr-speedbar-max-width 0)
#+END_SRC

* Diary
#+begin_src emacs-lisp :tangle yes
	(setq diary-file "~/org/seth.diary")
	(setq diary-file-name-prefix t)
	(setq diary-hook (quote (ignore)))
#+END_SRC

* Org

** General
#+begin_src emacs-lisp :tangle yes
	(setq global-orglink-mode t)
	(setq indent-tabs-mode nil)
	(setq org-adapt-indentation nil)
	(setq org-confirm-elisp-link-function nil)
	(setq org-download-heading-lvl nil)
	(setq org-download-image-dir ".attach/")
	(setq org-download-screenshot-method "maim --opengl -s %s")
	(setq org-download-timestamp "_%Y%m%d_%H%M%S")
	(setq org-edit-src-content-indentation 0)
	(setq org-ellipsis " ï„‡ ")
	(setq org-hide-block-startup t)
	(setq org-startup-indented t)
	(setq org-startup-with-inline-images t)
	(setq org-journal-dir "~/org/journal/")
	(setq org-org-htmlized-css-url "")
	(setq org-recent-headings-candidate-number-limit 5)
	(setq org-recent-headings-mode t)
	(setq org-src-tab-acts-natively t)
	(setq org-support-shift-select t)
#+END_SRC

** Agenda
#+begin_src emacs-lisp :tangle yes
	(setq org-agenda-dim-blocked-tasks nil)
	(setq org-agenda-files
		(quote (
			"~/org/seth.org"
			"~/org/seth.t.chase@gmail.com.org"
		)))
	(setq org-agenda-finalize-hook (quote (org-agenda-property-add-properties)))
	(setq org-agenda-include-diary t)
	(setq org-agenda-inhibit-startup t)
	(setq org-agenda-mouse-1-follows-link t)
	(setq org-agenda-start-with-clockreport-mode t)
	(setq org-agenda-start-with-follow-mode t)
	(setq org-agenda-start-with-log-mode (quote clockcheck))
	(setq org-agenda-window-setup (quote other-frame))
#+END_SRC

** Babel
#+begin_src emacs-lisp :tangle yes
	(setq org-babel-hash-show-time t)
	(setq org-babel-load-languages
        (quote (
            (python . t)
            (sql . t)
            (shell . t)
        )))
	(setq org-babel-no-eval-on-ctrl-c-ctrl-c nil)
	(setq org-babel-shell-names
		(quote
			("sh" "bash" "csh" "ash" "dash" "ksh" "mksh" "posh" "zsh")))
	(setq org-confirm-babel-evaluate nil)
#+END_SRC

** Capture
#+begin_src emacs-lisp :tangle yes
	(setq org-capture-templates
		(quote (
			("c" "Changelog" entry
				(file+headline (f-expand "CHANGELOG.org" (doom/project-root)) "Unreleased")
				"* %?")
			("n" "Notes" entry
				(file+headline org-default-notes-file "Inbox")
				"* %u %? %i"
				:prepend t)
		)))
	(setq org-capture-use-agenda-date t)
#+END_SRC

** Export
#+begin_src emacs-lisp :tangle yes
	(setq org-export-allow-bind-keywords t)
	(setq org-export-babel-evaluate (quote inline-only))
	(setq org-export-backends (quote (ascii html icalendar latex md org)))
	(setq org-export-coding-system (quote utf-8))
	(setq org-export-dispatch-use-expert-ui t)
	(setq org-export-in-background nil)
	(setq org-export-with-archived-trees t)
	(setq org-export-with-clocks t)
	(setq org-export-with-email t)
	(setq org-export-with-planning t)
	(setq org-export-with-priority t)
	(setq org-export-with-properties t)
#+END_SRC

** Fontify (a.k.a. syntax highlighting)
#+begin_src emacs-lisp :tangle yes
	(setq org-fontify-done-headline t)
	(setq org-fontify-quote-and-verse-blocks t)
	(setq org-fontify-whole-heading-line t)
#+END_SRC

* Packages
#+begin_src emacs-lisp :tangle yes
	(setq package-enable-at-startup t)
	(setq package-hidden-regexps (quote ("^[^~]+.*$" "^~.*")))
	(setq package-selected-packages
		(quote
			(fold-this hideshowvis yafolding markdown-edit-indirect markdown-mode+ markdown-preview-eww obfusurl immortal-scratch omni-kill omni-log omni-scratch omni-tags persistent-scratch persp-fr persp-mode persp-mode-projectile-bridge persp-projectile scratch scratch-ext scratch-log scratch-pop scratches unkillable-scratch flex-isearch ido-at-point ido-completing-read+ ido-flex-with-migemo ido-grid-mode ido-select-window ido-sort-mtime ido-ubiquitous ido-yes-or-no idomenu cmds-menu menu-bar+ minibuffer-line minimap pianobar ppd-sr-speedbar project-explorer project-local-variables project-persist-drawer project-root project-shells projectile-codesearch projectile-direnv projectile-git-autofetch projectile-speedbar projectile-variable sr-speedbar tabbar tabbar-ruler tool-bar+ totd yascroll cython-mode move-dup move-text autofit-frame emacs-setup fix-input frame-cmds frame-fns frame-mode frame-tag framemove frames-only-mode free-keys org-protocol-jekyll hledger-mode hide-comnt hide-lines hide-region hideshow-org helm helm-anything helm-bind-key helm-books helm-chrome helm-commandlinefu helm-describe-modes helm-fuzzier helm-git helm-git-grep helm-gitlab helm-orgcard helm-proc helm-project-persist helm-spotify helm-spotify-plus helm-systemd helm-themes helm-xref ace-mc centered-cursor-mode evil-mc mc-extras dired-narrow websocket win-switch window+ window-jump window-layout window-purpose tablist auto-org-md autobookmarks calfw calfw-gcal counsel-osx-app imenu-anywhere ivy-gitlab ivy-todo orgtbl-aggregate orgtbl-join orgtbl-show-header origami osx-browse osx-clipboard osx-lib osx-org-clock-menubar codebug operate-on-number org-dotemacs org-easy-img-insert org-ehtml org-repo-todo org-sticky-header outline-magic zeal-at-point yard-mode yaml-mode xpm workgroups2 wgrep web-mode visual-fill-column vimrc-mode use-package unityjs-mode toml-mode tide swift-mode stylus-mode stripe-buffer smex smartparens smart-forward slime shader-mode shackle sass-mode ruby-refactor rspec-mode rotate-text repl-toggle realgud rainbow-mode rainbow-delimiters racer quickrun pug-mode processing-mode powerline pip-requirements phpunit php-refactor-mode php-extras php-boris persistent-soft pcre2el ox-pandoc orglink org2jekyll org-wc org-tree-slide org-transform-tree-table org-tracktable org-time-budgets org-table-sticky-header org-table-comment org-seek org-review org-recent-headings org-random-todo org-preview-html org-plus-contrib org-parser org-mac-link org-journal org-jekyll org-gcal org-fstree org-download org-doing org-dashboard org-context org-cliplink org-capture-pop-frame org-bullets org-bookmark-heading org-board org-beautify-theme org-babel-eval-in-repl org-attach-screenshot org-alert org-agenda-property org-ac openwith opencl-mode omnisharp occur-context-resize ob-sql-mode ob-ipython ob-browser ob-async nose nodejs-repl nlinum neotree nasm-mode moonscript modern-cpp-font-lock mips-mode meghanada markdown-toc less-css-mode julia-mode jsx-mode json-mode js2-refactor irony-eldoc impatient-mode imenu-list ido-vertical-mode highlight-quoted highlight-numbers highlight-indentation help-fns+ haxor-mode haskell-mode hack-mode groovy-mode goto-last-change gorepl-mode google-this go-eldoc glsl-mode gitignore-mode gitconfig-mode git-messenger git-gutter-fringe flycheck-rust flycheck-pos-tip flycheck-irony flx-ido fancy-narrow exec-path-from-shell evil-visualstar evil-textobj-anyblock evil-snipe evil-search-highlight-persist evil-plugins evil-numbers evil-multiedit evil-matchit evil-magit evil-indent-plus evil-exchange evil-escape evil-embrace evil-easymotion evil-commentary evil-args evil-anzu esup ert-runner ensime emr emmet-mode elmacro eldoc-eval editorconfig dumb-jump doom-theme dockerfile-mode disaster dired-k demangle-mode dash-at-point cuda-mode crystal-mode company-web company-tern company-statistics company-sourcekit company-shell company-restclient company-racer company-quickhelp company-lua company-irony-c-headers company-irony company-inf-ruby company-go company-dict company-ansible company-anaconda command-log-mode coffee-mode cmake-mode browse-at-remote auto-yasnippet auto-compile applescript-mode android-mode all-the-icons ace-link)))
	(setq use-package-enable-imenu-support t)
	(setq use-package-verbose t)
#+END_SRC

* Modules

** Helm
#+begin_src emacs-lisp :tangle yes
	(setq helm-M-x-always-save-history t)
	(setq helm-adaptive-mode t)
	(setq helm-allow-mouse nil)
	(setq helm-autoresize-mode t)
#+END_SRC

** Jdee DB
#+begin_src emacs-lisp :tangle yes
	(setq jdee-db-active-breakpoint-face-colors (cons "#0d0f11" "#41728e"))
	(setq jdee-db-requested-breakpoint-face-colors (cons "#0d0f11" "#b5bd68"))
	(setq jdee-db-spec-breakpoint-face-colors (cons "#0d0f11" "#585858"))
#+END_SRC

** Projectile
#+begin_src emacs-lisp :tangle yes
	(setq org-projectile:allow-tramp-projects t)
	(setq org-projectile:projects-file "/home/ub2/org/Projects/TODO.org")
	(setq projectile-cache-file "/home/ub2/.emacs.d/private/cache/SERVER2/projectile.cache")
	(setq projectile-completion-system (quote helm))
	(setq projectile-enable-caching t)
	(setq projectile-file-exists-remote-cache-expire nil)
	(setq projectile-globally-ignored-files (quote ("Icon" "TAGS" "*.pyc")))
	(setq projectile-require-project-root nil)
	(setq projectile-sort-order (quote modification-time))
	(setq projectile-switch-project-action (quote doom/wg-projectile-switch-project))
#+END_SRC

** Semantic
#+begin_src emacs-lisp :tangle yes
	(setq global-semantic-highlight-func-mode t)
	(setq semantic-mode t)
	(setq semantic-stickyfunc-indent-string "")
#+END_SRC

* Shells

** Generally
#+begin_src emacs-lisp :tangle yes
	(setq explicit-shell-file-name "/usr/local/bin/zsh")
#+END_SRC

** Python
#+begin_src emacs-lisp :tangle yes
	(setq python-shell-completion-native-enable t)
	(setq python-shell-interpreter-args "")
	(setq python-shell-prompt-block-regexp "\\.\\.\\.\\.: ")
	(setq python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: ")
	(setq python-shell-prompt-regexp "In \\[[0-9]+\\]: ")
	(setq python-shell-virtualenv-root "~/.virtualenvs/dev")
#+END_SRC

* Version Control

#+begin_src emacs-lisp :tangle yes
	(setq vc-annotate-background "#000000")
	(setq vc-annotate-color-map
		(quote
			((20 . "#B6E63E")
			 (40 . "#c4db4e")
			 (60 . "#d3d15f")
			 (80 . "#E2C770")
			 (100 . "#ebb755")
			 (120 . "#f3a73a")
			 (140 . "#FD971F")
			 (160 . "#fb713a")
			 (180 . "#fa4b56")
			 (200 . "#F92672")
			 (220 . "#f33260")
			 (240 . "#ed3f4e")
			 (260 . "#E74C3C")
			 (280 . "#dd6a60")
			 (300 . "#d38885")
			 (320 . "#c9a6aa")
			 (340 . "#C0C5CF")
			 (360 . "#C0C5CF"))))
	(setq vc-annotate-very-old-color nil)
	(setq vc-follow-symlinks nil)
	(setq vc-make-backup-files nil)
#+END_SRC

* TO REVIEW

#+begin_src emacs-lisp :tangle no
	; (map! [f9]   'what-face
	;       ;; Essential
	;       ;; "M-;"  'eval-expression
	;       ;; "M-:"  'eval-region
	;       ;; "M-X"  'smex-major-mode-commands
	;       "M-X"  'smex
	;       "A-x"  'smex
	;       "A-X"  'smex-major-mode-commands
	;       "A-;"  'eval-expression
	;       ;; Tools
	;       "A-/"  'evil-commentary-line
	;       "M-/"  'evil-commentary-line
	;       "M-b"  'doom:build
	;       "C-`"  'doom/popup-last-buffer
	;       "M-~"  'doom/eshell
	;       ;; Text-scaling
	;       "M-0"  (Î»! (text-scale-set 0))
	;       "M-="  'text-scale-increase
	;       "M--"  'text-scale-decrease
	;       ;; Simple window navigation/manipulation
	;       "M-w"  'doom/close-window-or-tab
	;       "M-W"  'delete-frame
	;       "M-n"  'doom/new-buffer
	;       "M-N"  'doom/new-frame
	;       ;; Temporary escape into emacs mode
	;       [C-escape]    'evil-emacs-state
	;       :e [C-escape] 'evil-normal-state
	;       ;; Basic keys for emacs mode
	;       :e "h"    'evil-backward-char
	;       :e "j"    'evil-next-line
	;       :e "k"    'evil-previous-line
	;       :e "l"    'evil-forward-char
	;       :e "C-S-h"  'evil-window-left
	;       :e "C-S-j"  'evil-window-up
	;       :e "C-S-k"  'evil-window-down
	;       :e "C-S-l"  'evil-window-right
	;         "C-w"     'ace-window
	;       ;; Switching tabs (workgroups)
	;       :m "C-1"  (Î»! (doom:switch-to-tab 0))
	;       :m "C-2"  (Î»! (doom:switch-to-tab 1))
	;       :m "C-3"  (Î»! (doom:switch-to-tab 2))
	;       :m "C-4"  (Î»! (doom:switch-to-tab 3))
	;       :m "C-5"  (Î»! (doom:switch-to-tab 4))
	;       :m "C-6"  (Î»! (doom:switch-to-tab 5))
	;       :m "C-7"  (Î»! (doom:switch-to-tab 6))
	;       :m "C-8"  (Î»! (doom:switch-to-tab 7))
	;       :m "C-9"  (Î»! (doom:switch-to-tab 8))

	;       [M-backspace]       'doom/backward-kill-to-bol-and-indent
	;       [A-left]            'backward-word
	;       [A-right]           'forward-word
	;       "A-SPC"             'just-one-space
	;       "M-a"               'mark-whole-buffer
	;       "M-c"               'evil-yank
	;       "M-q"               'save-buffers-kill-emacs
	;       "M-s"               'save-buffer
	;       "M-v"               'clipboard-yank
	;       "M-z"               'undo
	;       "M-Z"               'redo
	;       "C-M-f"             'doom/toggle-fullscreen
	;       :m  "A-j"           'doom/multi-next-line
	;       :m  "A-k"           'doom/multi-previous-line
	;       :n  "M-r"           'doom:eval-buffer
	;       :v  "M-r"           'doom:eval-region
	;       :ni [M-f1]          'doom:docs-lookup
	;       ;; Textmate-esque indent shift left/right
	;       :i  "M-]"           'doom/smart-indent
	;       :i  "M-["           'doom/dumb-dedent
	;       ;; Restore osx text objects
	;       :i  [A-backspace]   'evil-delete-backward-word
	;       :i  [A-delete]      'doom/delete-forward-word

	;       ;;; <leader> and <localleader>
	;       :m ";" 'evil-ex
	;       (:leader
	;         :nv ","   'doom/ivy-switch-project-buffer ; or 'helm-buffers-list
	;         :nv "<"   'doom/ivy-switch-buffer         ; or 'helm-mini
	;         ; :nv "."   (@find-file-in default-directory)
	;         ; :nv "/"   (@find-file-in (doom/project-root) t)
	;         ; :nv ">"   'projectile-find-file-in-known-projects
	;         :n  ":"   'imenu-list-minor-mode          ; or 'helm-semantic-or-imenu
	;         :nv ";"   'counsel-imenu
	;         :v  "="   'align-regexp
	;         ; :nv "a"   'projectile-find-other-file
	;         :n  "b"   'counsel-bookmark               ; or 'helm-bookmarks
	;         :n  "B"   'bookmark-delete
	;         :n  "e"   'doom/flycheck-errors
	;         :n  "k"   'doom:docs-lookup
	;         :nv "l"   'doom/nlinum-toggle
	;         :nv "m"   'counsel-recentf                ; or 'helm-recentf
	;         :nv "M"   'projectile-recentf
	;         :nv "p"   'counsel-yank-pop
	;         :nv "P"   'counsel-projectile-switch-project ; or 'helm-projectile-switch-project
	;         :n  "r"   'emr-show-refactor-menu
	;         :n  "R"   'doom/reset-theme
	;         :n  "s"   'yas-visit-snippet-file
	;         :n  "S"   'doom/yas-find-file
	;         ;; Quick quitting
	;         :nv "Q"   'evil-save-and-quit
	;         :nv "C-q" 'doom/kill-workgroup-and-quit
	;         ;; Quick access to config files
	;         ; :nv "E"   (@find-file-in doom-emacs-dir t)
	;         ; :nv "\\"  (@find-file-in (f-expand ".dotfiles" "~") t)
	;         ;; Alternative to C-h (used as window shortcut)
	;         :n  "h"   'help-command
	;         (:prefix "d" ; <diff>
	;           :n "." 'doom/vcs-show-hunk
	;           :n "/" 'vc-diff
	;           :n "d" 'magit-status
	;           :n "D" 'git-messenger:popup-message
	;           :n "s" 'doom/vcs-stage-hunk
	;           :v "s" 'magit-stage
	;           :v "S" 'magit-stage
	;           :n "r" 'doom/vcs-revert-hunk
	;           :n "A" 'vc-annotate)
	;         (:prefix "t" ; <tmux>
	;           :n "." 'doom/tmux-cd-to-here
	;           :n "/" 'doom/tmux-cd-to-project
	;           :v "r" 'doom:tmux)
	;         (:prefix "o" ; <os>
	;           :n "o" 'os-open-in-default-program
	;           :n "r" 'os-reveal
	;           :n "p" 'os-reveal-project
	;           :n "b" 'os-open-in-browser
	;           :n "u" 'os-upload
	;           :n "U" 'os-upload-folder
	;           :n "t" 'os-switch-to-term
	;           :n "T" 'os-switch-to-term-and-cd
	;           (:when IS-MAC
	;             :n "l" 'os-send-to-launchbar
	;             :n "L" 'os-send-project-to-launchbar))
	;         (:prefix "x" ; <org>
	;           :n "x" 'doom/org
	;           ; :n "." (@find-file-in org-directory)
	;           ; :n "/" (@find-file-in org-directory t)
	;           ; :n "e" (@find-file-in org-export-directory)
	;           ))

	;       (:localleader
	;         :n "\\" 'doom/neotree
	;         :n "b"  'doom:build
	;         :n "R"  'doom:repl
	;         :v "R"  'doom:repl-eval)

	;       ;;; Evil-esque bindings
	;       ;; Yank to EOL
	;       :n  "Y"   "y$"
	;       ;; Don't move cursor on indent
	;       :n  "="  'doom/static-reindent
	;       :v  "="  'evil-indent
	;       ;; Folding
	;       :n  "zr" 'doom/evil-open-folds
	;       :n  "zm" 'doom/evil-close-folds
	;       :n  "zx" 'doom/kill-real-buffer
	;       ;; Buffers
	;       :n  "ZX" 'bury-buffer
	;       :n  "]b" 'doom/next-real-buffer
	;       :n  "[b" 'doom/previous-real-buffer
	;       ;; Diffs
	;       :m  "]d" 'doom/vcs-next-hunk
	;       :m  "[d" 'doom/vcs-prev-hunk
	;       :m  "]e" 'doom/flycheck-next-error
	;       :m  "[e" 'doom/flycheck-previous-error
	;       ;; Switch tabs
	;       :n  "]w" 'doom:switch-to-workgroup-right
	;       :n  "[w" 'doom:switch-to-workgroup-left
	;       :m  "gt" 'doom:switch-to-workgroup-right
	;       :m  "gT" 'doom:switch-to-workgroup-left
	;       ;; Increment/decrement number under cursor
	;       :n  "g=" 'evil-numbers/inc-at-pt
	;       :n  "g-" 'evil-numbers/dec-at-pt
	;       :n  "gf" 'find-file-at-point
	;       ;; Navigation
	;       :nv "K"  'smart-up
	;       :m  "gD" 'doom/find-def
	;       :n  "gp" 'doom/reselect-paste
	;       :n  "gc" 'evil-commentary
	;       :n  "gx" 'evil-exchange
	;       :n  "gr" 'doom:eval-region
	;       :n  "gR" 'doom:eval-buffer
	;       :v  "gR" 'doom:eval-region-and-replace
	;       :m  "g]" 'smart-forward
	;       :m  "g[" 'smart-backward
	;       :v  "@"  'doom/evil-macro-on-all-lines
	;       :n  "g@" 'doom/evil-macro-on-all-lines
	;       ;; Repeat in visual mode
	;       :v  "."  'evil-repeat
	;       ;; vnoremap < <gv
	;       :v  "<"  (Î»! (evil-shift-left (region-beginning) (region-end))
	;                    (evil-normal-state)
	;                    (evil-visual-restore))
	;       ;; vnoremap > >gv
	;       :v  ">"  (Î»! (evil-shift-right (region-beginning) (region-end))
	;                    (evil-normal-state)
	;                    (evil-visual-restore))
	;       ;; undo/redo for regions (NOTE: Buggy!)
	;       :nv "u"   'undo-tree-undo
	;       :nv "C-r" 'undo-tree-redo
	;       ;; paste from recent yank register (which isn't overwritten)
	;       :v  "C-p" "\"0p"

	;     (:map evil-window-map ; prefix "C-w"
	;         ;; Navigation
	;         "C-S-h"     'evil-window-left
	;         "C-S-j"     'evil-window-up
	;         "C-S-k"     'evil-window-down
	;         "C-S-l"     'evil-window-right
	;         "C-w"     'ace-window
	;         ;; Swapping windows
	;         "H"       'doom/evil-window-move-l
	;         "J"       'doom/evil-window-move-u
	;         "K"       'doom/evil-window-move-d
	;         "L"       'doom/evil-window-move-r
	;         "C-S-w"   (Î»! (ace-window 4))
	;         ;; Window undo/redo
	;         "u"       'doom/undo-window-change
	;         "C-u"     'doom/undo-window-change
	;         "C-r"     'doom/redo-window-change
	;         ;; Delete window
	;         "C-C"     (Î»! (ace-window 16)))

	;       ;;; Plugins
	;       ;; evil-visual-star
	;       :v  "*"   'evil-visualstar/begin-search-forward
	;       :v  "#"   'evil-visualstar/begin-search-backward

	;       ;; evil-multiedit
	;       :v  "R"     'evil-multiedit-match-all
	;       :n  "M-C-D" 'evil-multiedit-restore
	;       :n  "M-d"   'evil-multiedit-match-symbol-and-next
	;       :n  "M-D"   'evil-multiedit-match-symbol-and-prev
	;       :v  "M-d"   'evil-multiedit-match-and-next
	;       :v  "M-D"   'evil-multiedit-match-and-prev

	;       ;; evil-surround
	;       :v  "S"   'evil-surround-region
	;       :o  "s"   'evil-surround-edit
	;       :o  "S"   'evil-Surround-edit

	;       ;; expand-region
	;       :v  "v"   'er/expand-region
	;       :v  "V"   'er/contract-region

	;       ;; evil-matchit
	;       :m  "%"   'evilmi-jump-items

	;       ;; hide-show/evil-matchit
	;       :m  "<tab>" 'doom/evil-matchit
	;       ;; rotate-text
	;       :n  "!"     'rotate-text

	;       ;; auto-yasnippet
	;       :i  "<C-tab>" 'aya-expand
	;       :nv "<C-tab>" 'aya-create

	;       ;; yasnippet
	;       (:after yasnippet
	;         (:map yas-minor-mode-map
	;           :i [tab] 'yas-expand
	;           :v [tab] 'doom/yas-insert-snippet))

	;       ;; company-mode and vim-like omni-complete
	;       :i "C-SPC" 'doom/company-complete
	;       (:prefix "C-x"
	;         :i "C-l"   'doom/company-whole-lines
	;         :i "C-k"   'doom/company-dict-or-keywords
	;         :i "C-f"   'company-files
	;         :i "C-]"   'company-tags
	;         :i "s"     'company-ispell
	;         :i "C-s"   'company-yasnippet
	;         :i "C-o"   'company-capf
	;         :i "C-n"   'company-dabbrev-code
	;         :i "C-p"   (Î»! (let ((company-selection-wrap-around t))
	;                          (call-interactively 'company-dabbrev-code)
	;                          (company-select-previous-or-abort))))

	;       (:after company
	;         (:map company-active-map
	;           "C-o"        'company-search-kill-others
	;           "C-n"        'company-select-next
	;           "C-p"        'company-select-previous
	;           "C-h"        'company-quickhelp-manual-begin
	;           "C-S-h"      'company-show-doc-buffer
	;           "C-S-s"      'company-search-candidates
	;           "C-s"        'company-filter-candidates
	;           "C-SPC"      'company-complete-common-or-cycle
	;           [tab]        'doom/company-complete-common-or-complete-full
	;           [backtab]    'company-select-previous
	;           [escape]     (Î»! (company-abort) (evil-normal-state 1))
	;           [C-return]   'counsel-company)
	;         (:map company-search-map
	;           "C-n"        'company-search-repeat-forward
	;           "C-p"        'company-search-repeat-backward
	;           [escape]     'company-search-abort))

	;       ;; help-mode
	;       (:after help-mode
	;         (:map help-map
	;           "e" 'doom/popup-messages)
	;         (:map help-mode-map
	;           :n "]]"  'help-go-forward
	;           :n "[["  'help-go-back
	;           :n "o"   'ace-link-help))

	;       ;;; Insert mode hacks
	;       ;; Textmate-esque newlines
	;       :i [backspace]    'delete-backward-char
	;       :i [M-backspace]  'doom/backward-kill-to-bol-and-indent
	;       :i [C-return]     (Î»! (evil-open-below 1))
	;       ;; Emacsien motions for insert mode
	;       :i "C-b" 'backward-word
	;       :i "C-f" 'forward-word
	;       ;; escape from insert mode (more responsive than using key-chord-define)
	;       :irv "C-g" 'evil-normal-state
	;       )
#+END_SRC